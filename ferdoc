#! /usr/bin/env php

<?php

require('vendor/autoload.php');

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Console\Question\ConfirmationQuestion;
use Symfony\Component\Console\Question\ChoiceQuestion;

require_once "vendor/mustangostang/spyc/spyc.php";

$app = new Application('ferdoc');

$app->register('composer install')
    ->addArgument('name')
    ->setCode(function(InputInterface $input, OutputInterface $output){
        $process = new Process('docker-compose run --rm -w /var/www/html app composer install');
        
        $output->writeln('Running composer install, please wait');

        $process->setTimeout(400);

        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
                echo 'OUT > '.$buffer;
            }
        });

        $output->writeln($process->getOutput());
});

$app->register('npm install')
    ->addArgument('name')
    ->setCode(function(InputInterface $input, OutputInterface $output){
        $process = new Process('docker-compose run --rm -w /var/www/html node npm install');

        $output->writeln('Running NPM install, please wait');

        $process->setTimeout(400);

        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
                echo 'OUT > '.$buffer;
            }
        });

        $output->writeln($process->getOutput());
});


$app->register('watch')
    ->addArgument('name')
    ->setCode(function(InputInterface $input, OutputInterface $output){
        $process = new Process('docker-compose run --rm -w /var/www/html node node_modules/.bin/webpack --watch --watch-poll --config=node_modules/laravel-mix/setup/webpack.config.js');

        $output->writeln('Running watcher...');

        $process->setTimeout(0);

        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
                echo 'OUT > '.$buffer;
            }
        });

        $output->writeln($process->getOutput());
});

$app->register('test')
    ->addArgument('feature')
    ->setCode(function(InputInterface $input, OutputInterface $output){
        $process = new Process('docker-compose run --rm -w /var/www/html app ./vendor/bin/phpunit');

        $output->writeln('Running Tests (Good luck!)');

        $process->setTimeout(0);

        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
                echo 'OUT > '.$buffer;
            }
        });

        $output->writeln($process->getOutput());
});

$app->register('artisan')
    ->addArgument('argument', 
        InputArgument::IS_ARRAY,
        InputOption::VALUE_OPTIONAL
    )
    ->addOption('flags',
        InputOption::VALUE_REQUIRED)
    ->setCode(function(InputInterface $input, OutputInterface $output){
        
        $arg = '';

        foreach($input->getArgument('argument') as $item)
        {
            $arg .= $item . ' ';
        }

        $dash = '';

        if($input->getOption('flags') != null)
        {
            $dash = '-';
        }

        $process = new Process('docker-compose run --rm -w /var/www/html app php artisan '. $arg . ' ' . $dash . $input->getOption('flags'));

        $process->setTimeout(0);

        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
                echo 'OUT > '.$buffer;
            }
        });

        $output->writeln($process->getOutput());
});


$app->register('docker')
    ->addArgument('init')
    ->setCode(function(InputInterface $input, OutputInterface $output){
        
        $workfolder = getcwd();

        $directory = scandir($workfolder);

        if($input->getArgument('init'))
        {
            // Create a docker directory if it does not exist
            if(!in_array('docker', $directory))
            {
                // Double check if it is a directory
                if(is_dir($workfolder))
                {
                    $output->writeln('This will place a docker directory within your project');
                    
                    $output->writeln($workfolder . directorySeperator() . 'docker');
                    
                    mkdir($workfolder .directorySeperator(). 'docker');

                    $output->writeln('<info>Directory created successfully!</info>');    
                }
            }

            $output->writeln('<comment>This will override all the current docker directory contents</comment>');

            $helper = $this->getHelper('question');

            $question = new ChoiceQuestion(
                'Would you like to proceeed? (defaults to yes)',
                array('yes', 'no'),
                0
            );

            $question->setErrorMessage('option %s is invalid.');

            $answer = $helper->ask($input, $output, $question);

            $dockerDir = $workfolder .directorySeperator(). 'docker'. directorySeperator();

            if($answer == 'yes')
            {

                $dotenv = new Dotenv\Dotenv($workfolder);
                $dotenv->load();

                $appName = getenv('APP_NAME');

                // Create the folder structure
                if(!is_dir($dockerDir .'app'))
                {
                    mkdir($dockerDir .'app');
                }
                
                if(!is_dir($dockerDir .'node'))
                {
                    mkdir($dockerDir .'node');
                }
                
                if(!is_dir($dockerDir .'nginx'))
                {
                    mkdir($dockerDir .'nginx');
                }

                if(!is_dir($dockerDir .'php'))
                {
                    mkdir($dockerDir .'php');
                }

                
                $buildFile = __DIR__.directorySeperator().'src'.directorySeperator().'tempaltes'.directorySeperator().'build';
                
                // Create the build file from the tempalte
                copy($buildFile, $dockerDir.'build');
                $output->writeln('<info>Created build file</info>');
                chmod($buildFile, 777);
                
                // App
                copy(__DIR__.directorySeperator().'src'.directorySeperator().'tempaltes'.directorySeperator().'app'.directorySeperator().'Dockerfile', $dockerDir.'app'.directorySeperator().'Dockerfile');
                $output->writeln('<info>App files created</info>');

                // Nginx
                copy(__DIR__.directorySeperator().'src'.directorySeperator().'tempaltes'.directorySeperator().'nginx'.directorySeperator().'default', $dockerDir.'nginx'.directorySeperator().'default');
                copy(__DIR__.directorySeperator().'src'.directorySeperator().'tempaltes'.directorySeperator().'nginx'.directorySeperator().'Dockerfile', $dockerDir.'nginx'.directorySeperator().'Dockerfile');
                $output->writeln('<info>Nginx files created</info>');


                // PHP
                copy(__DIR__.directorySeperator().'src'.directorySeperator().'tempaltes'.directorySeperator().'php'.directorySeperator().'php-fpm.conf', $dockerDir.'php'.directorySeperator().'php-fpm.conf');
                copy(__DIR__.directorySeperator().'src'.directorySeperator().'tempaltes'.directorySeperator().'php'.directorySeperator().'www.conf', $dockerDir.'app'.directorySeperator().'www.conf');
                copy(__DIR__.directorySeperator().'src'.directorySeperator().'tempaltes'.directorySeperator().'php'.directorySeperator().'Dockerfile', $dockerDir.'app'.directorySeperator().'Dockerfile');
                $output->writeln('<info>PHP files created</info>');
                
                // Node
                $nodeDockerFile = __DIR__.directorySeperator().'src'.directorySeperator().'tempaltes'.directorySeperator().'node'.directorySeperator().'Dockerfile';
                copy($nodeDockerFile, $dockerDir.'node'.directorySeperator().'Dockerfile');
                $output->writeln('<info>Created node Dockerfile</info>');
                
                $build = [
                    'version' => '2',
                    'services' => [],
                    'networks' => [
                        'fdnet' => [
                            'driver' => 'bridge'
                        ]
                    ],
                    'volumes' => [
                        'mysqldata' => [
                            'driver' => 'local'
                        ],
                        'redisdata' => [
                            'driver' => 'local'
                        ]
                    ]
                ];

                $nodeContainer = [
                    'build' => [
                        'context' => './docker/node',
                        'dockerfile' => 'dockerfile'
                    ],
                    'image' => 'deferdie/node',
                    'volumes' => ['.:/var/www/html'],
                    'networks' => [
                        'fdnet'
                    ],
                    'container_name' => $appName .'_node'
                ];
                
                $nginxContainer = [
                    'build' => [
                        'context' => './docker/nginx',
                        'dockerfile' => 'dockerfile'
                    ],
                    'image' => 'deferdie/nginx',
                    'volumes' => ['.:/var/www/html'],
                    'ports' => ['80:80'],
                    'networks' => [
                        'fdnet'
                    ],
                    'container_name' => $appName .'_nginx'
                ];
                
                $phpContainer = [
                    'build' => [
                        'context' => './docker/nginx',
                        'dockerfile' => 'dockerfile'
                    ],
                    'image' => 'deferdie/nginx',
                    'volumes' => ['.:/var/www/html'],
                    'ports' => ['80:80'],
                    'networks' => [
                        'fdnet'
                    ],
                    'container_name' => $appName .'_php'
                ];
                
                $appContainer = [
                    'build' => [
                        'context' => './docker/app',
                        'dockerfile' => 'dockerfile'
                    ],
                    'image' => 'deferdie/app',
                    'volumes' => ['.:/var/www/html'],
                    'networks' => [
                        'fdnet'
                    ],
                    'container_name' => $appName .'_app'
                ];

                // Set default containers
                $build['services']['app'] = $appContainer;
                $build['services']['php'] = $phpContainer;
                $build['services']['nginx'] = $nginxContainer;
                $build['services']['node'] = $nodeContainer;

                
                $question = new ChoiceQuestion(
                    'Would you like mysql?',
                    array('yes', 'no'),
                    0
                );

                $question->setErrorMessage('option %s is invalid.');

                $answer = $helper->ask($input, $output, $question);

                if($answer == 'yes')
                {
                    $build['services']['mysql'] = mysqlConfig();
                }

                $question = new ChoiceQuestion(
                    'Would you like redis?',
                    array('yes', 'no'),
                    0
                );

                $question->setErrorMessage('option %s is invalid.');

                $answer = $helper->ask($input, $output, $question);
                
                if($answer == 'yes')
                {
                    $build['services']['redis'] = redisConfig();
                }

                // Set the docker-compose file
                $yamlFile = fopen($workfolder.directorySeperator().'docker-compose.yml', "w") or die("Unable to open file!");

                fwrite($yamlFile, trim(Spyc::YAMLDump($build), '---'));
                fclose($yamlFile);

                $output->writeln('<info>Created app directory</info>');
            }else{
                $output->writeln('<warning>Not generating files!</warning>');
            }
        }
});

$app->register('run')
    ->setCode(function(InputInterface $input, OutputInterface $output){
    
        $process = new Process('docker-compose up -d');

        $process->setTimeout(0);

        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
                echo 'OUT > '.$buffer;
            }
        });

        $output->writeln($process->getOutput());
});


$app->register('down')
    ->setCode(function(InputInterface $input, OutputInterface $output){
    
        $process = new Process('docker-compose down');

        $process->setTimeout(0);

        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
                echo 'OUT > '.$buffer;
            }
        });

        $output->writeln($process->getOutput());
});

// Directory directory
function directorySeperator()
{
    if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
        return '\\';
    } else {
        return '/';
    }
}

// Get Mysql config
function mysqlConfig()
{
    return [
        'image' => 'mysql:5.7',
        'ports' => [
            "3306:3306"
        ],
        'environment' => [
            'MYSQL_ROOT_PASSWORD' => 'secret',
            'MYSQL_DATABASE' => 'homestead',
            'MYSQL_USER' => 'homestead',
            'MYSQL_PASSWORD' => 'secret',
        ],
        'volumes' => [
            'mysqldata:/var/lib/mysql'
        ],
        'networks' => [
            'fdnet'
        ],
        'container_name' => $appName .'_mysql'
    ];
}

// Get Redis config
function redisConfig()
{
    return [
        'image' => 'redis:alpine',
        'volumes' => [
            'redisdata:/data'
        ],
        'networks' => [
            'fdnet'
        ],
        'container_name' => $appName .'_mysql'
    ];
}
$app->run();
