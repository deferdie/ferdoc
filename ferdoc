#! /usr/bin/env php

<?php

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\Exception\ProcessFailedException;

require('vendor/autoload.php');

$app = new Application('ferdoc');

$app->register('composer install')
    ->addArgument('name')
    ->setCode(function(InputInterface $input, OutputInterface $output){
        $process = new Process('docker-compose run --rm -w /var/www/html app composer install');
        
        $output->writeln('Running composer install, please wait');

        $process->setTimeout(400);

        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
                echo 'OUT > '.$buffer;
            }
        });

        $output->writeln($process->getOutput());
});

$app->register('npm install')
    ->addArgument('name')
    ->setCode(function(InputInterface $input, OutputInterface $output){
        $process = new Process('docker-compose run --rm -w /var/www/html node npm install');

        $output->writeln('Running NPM install, please wait');

        $process->setTimeout(400);

        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
                echo 'OUT > '.$buffer;
            }
        });

        $output->writeln($process->getOutput());
});


$app->register('watch')
    ->addArgument('name')
    ->setCode(function(InputInterface $input, OutputInterface $output){
        $process = new Process('docker-compose run --rm -w /var/www/html node node_modules/.bin/webpack --watch --watch-poll --config=node_modules/laravel-mix/setup/webpack.config.js');

        $output->writeln('Running watcher...');

        $process->setTimeout(0);

        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
                echo 'OUT > '.$buffer;
            }
        });

        $output->writeln($process->getOutput());
});

$app->register('test')
    ->addArgument('feature')
    ->setCode(function(InputInterface $input, OutputInterface $output){
        $process = new Process('docker-compose run --rm -w /var/www/html app ./vendor/bin/phpunit');

        $output->writeln('Running Tests (Good luck!)');

        $process->setTimeout(0);

        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
                echo 'OUT > '.$buffer;
            }
        });

        $output->writeln($process->getOutput());
});

$app->register('artisan')
    ->addArgument('argument', 
        InputArgument::IS_ARRAY,
        InputOption::VALUE_OPTIONAL
    )
    ->addOption('flags',
        InputOption::VALUE_REQUIRED)
    ->setCode(function(InputInterface $input, OutputInterface $output){
        
        $arg = '';

        foreach($input->getArgument('argument') as $item)
        {
            $arg .= $item . ' ';
        }

        $dash = '';

        if($input->getOption('flags') != null)
        {
            $dash = '-';
        }

        $process = new Process('docker-compose run --rm -w /var/www/html app php artisan '. $arg . ' ' . $dash . $input->getOption('flags'));

        $process->setTimeout(0);

        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
                echo 'OUT > '.$buffer;
            }
        });

        $output->writeln($process->getOutput());
});

$app->run();
